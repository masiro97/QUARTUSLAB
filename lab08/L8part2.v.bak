module L8part2(sw,clk,key0,key1,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7);

	input [16:0]sw;
	input key0,key1,clk;
	
	output [0:6] HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,HEX6,HEX7;
	
	reg [7:0] A,B,S;
	
	initial begin
		A = sw[15:8];
		B = sw[7:0];
		S = A + B + sw[16];
	end
	
	wire [3:0]onesA,tensA,onesB,tensB,onesS,tensS,hundsS;
	
	assign onesA = A % 16;
   assign tensA = (A - onesA) / 16;
   assign onesB = B % 16;
   assign tensB = (B - onesB) / 16;
   assign onesS = S % 16;
   assign tensS = (S - onesS) / 16;
   assign hundsS = (S - (tensS * 16) - onesS) / 256;
    
   display_7seg d7(tensA,HEX7);
   display_7seg d6(onesA,HEX6);
   display_7seg d5(tensB,HEX5);
   display_7seg d4(onesB,HEX4);
   display_7seg d2(hundsS,HEX2);
   display_7seg d1(tensS,HEX1);
   display_7seg d0(onesS,HEX0);
	
endmodule

module display_7seg(sw,HEX);

   input[3:0] sw;
   output [0:6]HEX;
   
   assign HEX = (sw == 4'b0000) ? 7'b0000001: //0
                (sw == 4'b0001) ? 7'b1001111: //1
                (sw == 4'b0010) ? 7'b0010010: //2
                (sw == 4'b0011) ? 7'b0000110: //3
                (sw == 4'b0100) ? 7'b1001100: //4
                (sw == 4'b0101) ? 7'b0100100: //5
                (sw == 4'b0110) ? 7'b0100000: //6
                (sw == 4'b0111) ? 7'b0001101: //7
                (sw == 4'b1000) ? 7'b0000000: //8
                (sw == 4'b1001) ? 7'b0000100: //9
                (sw == 4'b1010) ? 7'b0001000:
                (sw == 4'b1011) ? 7'b1100000:
                (sw == 4'b1100) ? 7'b0110001:
                (sw == 4'b1101) ? 7'b1000010:
                (sw == 4'b1110) ? 7'b0110000:
                (sw == 4'b1111) ? 7'b0111000: 7'b1111111;
   
endmodule
